/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.74
 * Generated at: 2023-04-25 06:55:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head profile=\"http://www.w3.org/2005/10/profile\">\r\n");
      out.write("  <title>My Web</title>\r\n");
      out.write("  <meta charset=\"utf-8\">\r\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\">\r\n");
      out.write("  <link rel=\"icon\" type=\"image/png\" href=\"http://example.com/myicon.png\">\r\n");
      out.write("  <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\">\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css2?family=Playfair+Display:ital,wght@0,400;0,500;0,600;0,700;0,800;0,900;1,400;1,500;1,600;1,700;1,800;1,900&family=Song+Myung&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("  <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js\"></script>\r\n");
      out.write("  <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\"></script>\r\n");
      out.write("  <!-- layout.css import -->\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"css/layout.css\">\r\n");
      out.write("  <style>\r\n");
      out.write("    #clock{ width:500px; height:40px; color:yellow; font-weight:bold; font-size:12px; position: relative; margin: 0 auto;}\r\n");
      out.write("  </style> \r\n");
      out.write("  <script>\r\n");
      out.write("        function showtime(){\r\n");
      out.write("        const d=new Date();//시스템의 현재 날짜 정보 가져오기 (년월일시분초)\r\n");
      out.write("\r\n");
      out.write("        let today=\"\";\r\n");
      out.write("        today += d.getFullYear() + \".\"; //2023.\r\n");
      out.write("\r\n");
      out.write("        if(d.getMonth()+1<10){\r\n");
      out.write("            today += \"0\";\r\n");
      out.write("        }//if end\r\n");
      out.write("        today += d.getMonth()+1 + \".\";  //2023.02.\r\n");
      out.write("\r\n");
      out.write("        if(d.getDate()<10){\r\n");
      out.write("            today += \"0\";\r\n");
      out.write("        }//if end\r\n");
      out.write("        today += d.getDate();           //2023.02.16\r\n");
      out.write("\r\n");
      out.write("        switch(d.getDay()){\r\n");
      out.write("        case 0 : today+=\" (일) \"; break;\r\n");
      out.write("        case 1 : today+=\" (월) \"; break;\r\n");
      out.write("        case 2 : today+=\" (화) \"; break;\r\n");
      out.write("        case 3 : today+=\" (수) \"; break;\r\n");
      out.write("        case 4 : today+=\" (목) \"; break;\r\n");
      out.write("        case 5 : today+=\" (금) \"; break;\r\n");
      out.write("        case 6 : today+=\" (토) \"; break;\r\n");
      out.write("        }//switch end\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        if(d.getHours()<12){\r\n");
      out.write("        today += \" AM \";\r\n");
      out.write("        }else{\r\n");
      out.write("        today += \" PM \";                  //2023.02.16 (목) AM\r\n");
      out.write("        }//if end\r\n");
      out.write("\r\n");
      out.write("        if(d.getHours()<13){\r\n");
      out.write("        today += d.getHours() + \":\";\r\n");
      out.write("        }else{\r\n");
      out.write("        today += d.getHours()-12 + \":\"; \r\n");
      out.write("        }//if end                          //2023.02.16 (목) AM 9\r\n");
      out.write("\r\n");
      out.write("        if(d.getMinutes()<10){\r\n");
      out.write("        today+=\"0\";    \r\n");
      out.write("        }//if end\r\n");
      out.write("        today+=d.getMinutes() + \":\";       //2023.02.16 (목) AM 9:48\r\n");
      out.write("\r\n");
      out.write("        if(d.getSeconds()<10){\r\n");
      out.write("        today+=\"0\";    \r\n");
      out.write("        }//if end\r\n");
      out.write("        today+=d.getSeconds();             //2023.02.16 (목) AM 9:48:21\r\n");
      out.write("                    \r\n");
      out.write("        document.getElementById(\"clock\").innerText = today;\r\n");
      out.write("\r\n");
      out.write("        //1초후에 showtime함수를 호출\r\n");
      out.write("        timer = setTimeout(showtime, 1000);\r\n");
      out.write("\r\n");
      out.write("    }//showtime() end\r\n");
      out.write("\r\n");
      out.write("    let timer; //전역변수\r\n");
      out.write("\r\n");
      out.write("    function killtime() {\r\n");
      out.write("        clearTimeout(timer);//시간해제\r\n");
      out.write("    }//killtime() end\r\n");
      out.write("  </script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body onunload=\"killtime()\">\r\n");
      out.write("\r\n");
      out.write("<!-- 메인 카테고리 시작 -->\r\n");
      out.write("<nav class=\"navbar navbar-default\">\r\n");
      out.write("  <div class=\"container\">\r\n");
      out.write("    <div class=\"navbar-header\">\r\n");
      out.write("      <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\"#myNavbar\">\r\n");
      out.write("        <span class=\"icon-bar\"></span>\r\n");
      out.write("        <span class=\"icon-bar\"></span>\r\n");
      out.write("        <span class=\"icon-bar\"></span>                        \r\n");
      out.write("      </button>\r\n");
      out.write("      <a class=\"navbar-brand\" href=\"");
      out.print(request.getContextPath());
      out.write("/index.jsp\">HOME</a>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div class=\"collapse navbar-collapse\" id=\"myNavbar\">\r\n");
      out.write("      <ul class=\"nav navbar-nav navbar-right\">\r\n");
      out.write("        <li><a href=\"./bbs/bbsList.jsp\">게시판</a></li>\r\n");
      out.write("        <li><a href=\"#\">공지사항</a></li>\r\n");
      out.write("        <li><a href=\"./member/loginForm.jsp\">로그인</a></li>\r\n");
      out.write("        <li><a href=\"#\">포토갤러리</a></li>\r\n");
      out.write("        <li><a href=\"#\">메일보내기</a></li>\r\n");
      out.write("      </ul>\r\n");
      out.write("    </div>\r\n");
      out.write("  </div>\r\n");
      out.write("</nav><!-- 메인 카테고리 끝 -->\r\n");
      out.write("\r\n");
      out.write("<!-- Content 시작 -->\r\n");
      out.write("<!-- First Container 시작 -->\r\n");
      out.write("<div class=\"container-fluid bg-1 text-center\">\r\n");
      out.write("</div><!-- First Container 끝-->\r\n");
      out.write("\r\n");
      out.write("<!-- Second Container -->\r\n");
      out.write("<div class=\"container-fluid bg-3 text-center\">    \r\n");
      out.write("  <div class=\"row\">\r\n");
      out.write("    <div class=\"col-xs-12\">\r\n");
      out.write("        <!-- 본문 시작 -->\r\n");
      out.write("          <!-- 디지털시계 -->\r\n");
      out.write("          <div id=\"clock\"><script>showtime();</script></div>\r\n");
      out.write("        <!-- 본문 끝 -->\r\n");
      out.write("    </div><!-- col-xs-12 끝 -->\r\n");
      out.write("  </div><!-- row 끝-->\r\n");
      out.write("</div><!-- Second Container 끝-->\r\n");
      out.write("\r\n");
      out.write("<!-- Footer -->\r\n");
      out.write("<footer class=\"container-fluid bg-4 text-center\">\r\n");
      out.write("    Copyright &copy; 2023 MyWeb\r\n");
      out.write("</footer>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
